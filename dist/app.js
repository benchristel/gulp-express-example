"use strict";!function r(n,e,t){function o(a,f){if(!e[a]){if(!n[a]){var u="function"==typeof require&&require;if(!f&&u)return u(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var s=e[a]={exports:{}};n[a][0].call(s.exports,function(r){var e=n[a][1][r];return o(e?e:r)},s,s.exports,r,n,e,t)}return e[a].exports}for(var i="function"==typeof require&&require,a=0;a<t.length;a++)o(t[a]);return o}({1:[function(r,n,e){function t(r,n){if("string"!=typeof r)throw new Error("Yavanna.provide expects a name as the first argument.");if("function"!=typeof n)throw Error("Yavanna.provide expects a factory function as the second argument. Check the declaration of `"+r+"`.");if(a[r])throw Error("Yavanna: cannot override the previously registered factory for `"+r+"`.")}function o(r){if(!a[r])throw Error("Yavanna: no factory registered for `"+r+"`.")}var i={},a={},f={},u={};u.provide=function(r,n){return t(r,n),a[r]=n,Object.defineProperty(f,r,{get:function(){return u.get(r)}}),n},u.get=function(r){return o(r),i[r]||(i[r]=a[r](f)),i[r]},n.exports=u},{}],2:[function(r,n,e){!function(){var n=r("@benchristel/yavanna");n.provide("englishGreeting",function(r){var n=r.greet;return n("Hello")})}(),function(){var n=r("@benchristel/yavanna");n.provide("greet",function(){return function(r){return function(n){return r+", "+n+"."}}})}(),function(){var n=r("@benchristel/yavanna");console.log(n.get("englishGreeting")("Satoshi"))}()},{"@benchristel/yavanna":1}]},{},[2]);
//# sourceMappingURL=data:application/json;base64,
